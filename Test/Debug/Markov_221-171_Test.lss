
Chulyukov_221-171_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000710  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d1  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Port_ini>:
#include <util/delay.h>
//Инициализация портов
void Port_ini(void)
{
	//Подключения индикатора
	DDRD=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	//Подключение кнопки 
	DDRB&=~(1<<0);
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<0);	
  76:	88 b3       	in	r24, 0x18	; 24
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	08 95       	ret

0000007e <main>:
}
//Основная программа
int main(void)
{
	Port_ini();//Инициализация портов
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <Port_ini>
	signed char i,n=0;//Вспомогательные переменные
  82:	60 e0       	ldi	r22, 0x00	; 0
	//
	while (1)
	{
//........................................................................................
	//Действия по нажатию кнопки
	if(~PINB&(1<<0))//Если кнопка нажата
  84:	b0 99       	sbic	0x16, 0	; 22
  86:	0f c0       	rjmp	.+30     	; 0xa6 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e4       	ldi	r24, 0x4F	; 79
  8a:	93 ec       	ldi	r25, 0xC3	; 195
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0xe>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x14>
  92:	00 00       	nop
	{
	_delay_ms(200);//Задержка на дребезг контактов
		if(~PINB&(1<<0))//Если кнопка нажата
  94:	b0 99       	sbic	0x16, 0	; 22
  96:	07 c0       	rjmp	.+14     	; 0xa6 <main+0x28>
		{
		n++;//Установить следующий по счету режим
  98:	6f 5f       	subi	r22, 0xFF	; 255
		if(n>2)n=0;//Ограничение n до 2(количества возможных режимов 3: 0,1,2) 
  9a:	63 30       	cpi	r22, 0x03	; 3
  9c:	0c f0       	brlt	.+2      	; 0xa0 <main+0x22>
  9e:	60 e0       	ldi	r22, 0x00	; 0
		PORTD=0x00;//Погасить индикатор
  a0:	12 ba       	out	0x12, r1	; 18
		while(~PINB&(1<<0));//Ждать пока кнопка нажата
  a2:	b0 9b       	sbis	0x16, 0	; 22
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x24>
	}
	
	
//........................................................................................
	//Реализация режима свечения в зависимости от значения n
		switch (n)
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	c9 f1       	breq	.+114    	; 0x11c <main+0x9e>
  aa:	62 30       	cpi	r22, 0x02	; 2
  ac:	09 f4       	brne	.+2      	; 0xb0 <main+0x32>
  ae:	4d c0       	rjmp	.+154    	; 0x14a <main+0xcc>
  b0:	61 11       	cpse	r22, r1
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <main+0x6>
  b4:	11 c0       	rjmp	.+34     	; 0xd8 <main+0x5a>
		//................................
		case 0:
                //Сдвиг огонька сверху вниз
			for(i=0;i<=7;i++)
			{
			PORTD=(1<<i);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	08 2e       	mov	r0, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x44>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x40>
  c6:	22 bb       	out	0x12, r18	; 18
  c8:	e3 e2       	ldi	r30, 0x23	; 35
  ca:	f4 ef       	ldi	r31, 0xF4	; 244
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x54>
  d2:	00 00       	nop
		switch (n)
		{
		//................................
		case 0:
                //Сдвиг огонька сверху вниз
			for(i=0;i<=7;i++)
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x5c>
	}
	
	
//........................................................................................
	//Реализация режима свечения в зависимости от значения n
		switch (n)
  d8:	80 e0       	ldi	r24, 0x00	; 0
		{
		//................................
		case 0:
                //Сдвиг огонька сверху вниз
			for(i=0;i<=7;i++)
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	64 f3       	brlt	.-40     	; 0xb6 <main+0x38>
  de:	d2 cf       	rjmp	.-92     	; 0x84 <main+0x6>
		//.................................
		case 1:
		//Сдвиг двух огоньков сверху вниз
			for(i=0;i<=6;i++)
			{
			PORTD=(1<<i)|(1<<(7-i));
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x70>
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x6c>
  f2:	47 e0       	ldi	r20, 0x07	; 7
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	42 1b       	sub	r20, r18
  f8:	51 09       	sbc	r21, r1
  fa:	27 fd       	sbrc	r18, 7
  fc:	53 95       	inc	r21
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x86>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	4a 95       	dec	r20
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x82>
 108:	8e 2b       	or	r24, r30
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	83 e2       	ldi	r24, 0x23	; 35
 10e:	94 ef       	ldi	r25, 0xF4	; 244
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x92>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x98>
 116:	00 00       	nop
			}
		break;
		//.................................
		case 1:
		//Сдвиг двух огоньков сверху вниз
			for(i=0;i<=6;i++)
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0xa0>
	}
	
	
//........................................................................................
	//Реализация режима свечения в зависимости от значения n
		switch (n)
 11c:	20 e0       	ldi	r18, 0x00	; 0
			}
		break;
		//.................................
		case 1:
		//Сдвиг двух огоньков сверху вниз
			for(i=0;i<=6;i++)
 11e:	27 30       	cpi	r18, 0x07	; 7
 120:	fc f2       	brlt	.-66     	; 0xe0 <main+0x62>
 122:	b0 cf       	rjmp	.-160    	; 0x84 <main+0x6>
		break;
		//.................................
		case 2:
			for(i=0;i<=7;i++)
			{
			PORTD|=(1<<i);
 124:	32 b3       	in	r19, 0x12	; 18
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0xb4>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <main+0xb0>
 136:	83 2b       	or	r24, r19
 138:	82 bb       	out	0x12, r24	; 18
 13a:	e3 e2       	ldi	r30, 0x23	; 35
 13c:	f4 ef       	ldi	r31, 0xF4	; 244
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0xc0>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xc6>
 144:	00 00       	nop
			_delay_ms(250);
			}			
		break;
		//.................................
		case 2:
			for(i=0;i<=7;i++)
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	01 c0       	rjmp	.+2      	; 0x14c <main+0xce>
	}
	
	
//........................................................................................
	//Реализация режима свечения в зависимости от значения n
		switch (n)
 14a:	20 e0       	ldi	r18, 0x00	; 0
			_delay_ms(250);
			}			
		break;
		//.................................
		case 2:
			for(i=0;i<=7;i++)
 14c:	28 30       	cpi	r18, 0x08	; 8
 14e:	54 f3       	brlt	.-44     	; 0x124 <main+0xa6>
 150:	27 e0       	ldi	r18, 0x07	; 7
 152:	13 c0       	rjmp	.+38     	; 0x17a <main+0xfc>
			_delay_ms(250);
			}
			//
			for(i=7;i>=0;i--)
			{
			PORTD&=~(1<<i);
 154:	32 b3       	in	r19, 0x12	; 18
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <main+0xe4>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <main+0xe0>
 166:	80 95       	com	r24
 168:	83 23       	and	r24, r19
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	83 e2       	ldi	r24, 0x23	; 35
 16e:	94 ef       	ldi	r25, 0xF4	; 244
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xf2>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xf8>
 176:	00 00       	nop
			{
			PORTD|=(1<<i);
			_delay_ms(250);
			}
			//
			for(i=7;i>=0;i--)
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	22 23       	and	r18, r18
 17c:	5c f7       	brge	.-42     	; 0x154 <main+0xd6>
 17e:	82 cf       	rjmp	.-252    	; 0x84 <main+0x6>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
